version: '3'
services:
  database-stag:
    container_name: database-stag
    restart: always
    image: postgres:13-alpine # use latest official postgres version
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # configure postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - database-stag-data:/var/lib/postgresql/data/ # persist data even if container shuts down
    expose:
      - ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    command: -p ${POSTGRES_PORT}
    networks: 
      - application-stag-network
      
  backend-stag:
    container_name: backend-stag
    restart: always
    environment:
      NODE_ENV: staging
      APP_PORT: 3000 # container port
      FRONT_HOST: ${FRONT_HOST}
      FRONT_PORT: ${FRONT_PORT}
      POSTGRES_HOST: database-stag
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      JWT_SECRET: ${JWT_SECRET}
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - database-stag
    ports: 
      - ${APP_PORT}:3000 # expose port with prod port
    networks: 
      - application-stag-network
    volumes:
      - backend-stag-data:/usr/src/itkmitl-tcas-backend/upload # persist data even if container shuts down

volumes:
  database-stag-data: # named volumes can be managed easier using docker-compose
    driver: local
  backend-stag-data:
    driver: local
networks:
  application-stag-network:
    driver: bridge 